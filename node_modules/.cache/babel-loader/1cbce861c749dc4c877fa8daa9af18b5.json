{"ast":null,"code":"import _defineProperty from \"/Users/umarmuha/Documents/GITHUB/DashbaordWithReactTable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/umarmuha/Documents/GITHUB/DashbaordWithReactTable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/umarmuha/Documents/GITHUB/DashbaordWithReactTable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/umarmuha/Documents/GITHUB/DashbaordWithReactTable/src/views/examples/Tables.js\";\n\n/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { useState } from \"react\";\nimport { useTable } from \"react-table\"; // reactstrap components\n\nimport { Badge, Button, Card, CardHeader, CardFooter, DropdownMenu, DropdownItem, UncontrolledDropdown, DropdownToggle, Media, Pagination, PaginationItem, PaginationLink, Progress, Table, Container, Row, UncontrolledTooltip } from \"reactstrap\"; // core components\n\nimport Header from \"components/Headers/Header.js\";\n\nvar EditableCell = function EditableCell(_ref) {\n  var initialValue = _ref.value,\n      index = _ref.row.index,\n      id = _ref.column.id,\n      updateMyData = _ref.updateMyData;\n\n  // We need to keep and update the state of the cell normally\n  var _React$useState = React.useState(initialValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; //   We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  React.useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]); //removed onBlur={onBlur}\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  });\n}; // const IndeterminateCheckbox = React.forwardRef(\n// \t({ indeterminate, ...rest }, ref) => {\n// \t\tconsole.log(indeterminate);\n// \t\tconst defaultRef = React.useRef();\n// \t\tconst resolvedRef = ref || defaultRef;\n// \t\tconst [value, setValue] = useState({ ...rest }.checked);\n// \t\tReact.useEffect(() => {\n// \t\t\tresolvedRef.current.indeterminate = indeterminate;\n// \t\t}, [resolvedRef, indeterminate]);\n// \t\tconst handleValue = () => {\n// \t\t\tif (value) setValue(false);\n// \t\t\telse setValue(true);\n// \t\t};\n// \t\treturn (\n// \t\t\t<>\n// \t\t\t\t<Button\n// \t\t\t\t\ttype=\"checkbox\"\n// \t\t\t\t\tref={resolvedRef}\n// \t\t\t\t\t{...rest}\n// \t\t\t\t\tonClick={handleValue}\n// \t\t\t\t\tvalue={value}\n// \t\t\t\t>\n// \t\t\t\t\t{value ? \"CheckedIn\" : \"Checkout\"}\n// \t\t\t\t</Button>\n// \t\t\t</>\n// \t\t);\n// \t}\n// );\n// Be sure to pass our updateMyData and the skipPageReset option\n\n\nfunction App(_ref2) {\n  var _this2 = this;\n\n  var columns = _ref2.columns,\n      data = _ref2.data,\n      updateMyData = _ref2.updateMyData;\n\n  // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    updateMyData: updateMyData\n  } // (hooks) => {\n  // \thooks.visibleColumns.push((columns) => [\n  // \t\t{\n  // \t\t\tid: \"selection\",\n  // \t\t\tHeader: () => <div>CheckIn/Checkout</div>,\n  // \t\t\tCell: ({ row }) => (\n  // \t\t\t\t<div>\n  // \t\t\t\t\t<IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n  // \t\t\t\t</div>\n  // \t\t\t),\n  // \t\t},\n  // \t\t...columns,\n  // \t]);\n  // }\n  ),\n      rows = _useTable.rows,\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      selectedFlatRows = _useTable.selectedFlatRows,\n      selectedRowIds = _useTable.state.selectedRowIds,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize;\n\n  console.log(rows);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: \"mt--7\",\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"shadow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, \"Card tables\")), /*#__PURE__*/React.createElement(Table, Object.assign({\n    bordered: true,\n    hover: true\n  }, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }\n      }), column.render(\"Header\"));\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }), rows.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 12\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }\n      }), cell.render(\"Cell\"));\n    }));\n  }))))))));\n}\n\nfunction Tables() {\n  var columns = React.useMemo(function () {\n    return [{\n      Header: \"Name\",\n      accessor: \"name\"\n    }, {\n      Header: \"UserName\",\n      accessor: \"username\"\n    }, {\n      Header: \"Email\",\n      accessor: \"email\"\n    }, {\n      Header: \"Website\",\n      accessor: \"website\"\n    }, {\n      Header: \"Profile Progress\",\n      Cell: EditableCell\n    }];\n  }, []);\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      data = _React$useState4[0],\n      setData = _React$useState4[1];\n\n  var updateMyData = function updateMyData(rowIndex, columnId, value) {\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread({}, old[rowIndex], _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n    console.log(rowIndex, columnId, value);\n  };\n\n  React.useEffect(function () {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      return setData(res.map(function (item) {\n        return {\n          name: item.name,\n          username: item.username,\n          email: item.email,\n          website: item.website\n        };\n      }));\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(App, {\n    columns: columns,\n    data: data,\n    updateMyData: updateMyData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 4\n    }\n  }));\n}\n\nexport default Tables;","map":{"version":3,"sources":["/Users/umarmuha/Documents/GITHUB/DashbaordWithReactTable/src/views/examples/Tables.js"],"names":["React","useState","useTable","Badge","Button","Card","CardHeader","CardFooter","DropdownMenu","DropdownItem","UncontrolledDropdown","DropdownToggle","Media","Pagination","PaginationItem","PaginationLink","Progress","Table","Container","Row","UncontrolledTooltip","Header","EditableCell","initialValue","value","index","row","id","column","updateMyData","setValue","onChange","e","target","onBlur","useEffect","App","columns","data","rows","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","selectedFlatRows","selectedRowIds","state","pageIndex","pageSize","console","log","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","Tables","useMemo","accessor","Cell","setData","rowIndex","columnId","old","fetch","then","res","json","item","name","username","email","website"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,SACCC,KADD,EAECC,MAFD,EAGCC,IAHD,EAICC,UAJD,EAKCC,UALD,EAMCC,YAND,EAOCC,YAPD,EAQCC,oBARD,EASCC,cATD,EAUCC,KAVD,EAWCC,UAXD,EAYCC,cAZD,EAaCC,cAbD,EAcCC,QAdD,EAeCC,KAfD,EAgBCC,SAhBD,EAiBCC,GAjBD,EAkBCC,mBAlBD,QAmBO,YAnBP,C,CAoBA;;AACA,OAAOC,MAAP,MAAmB,8BAAnB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAKf;AAAA,MAJEC,YAIF,QAJLC,KAIK;AAAA,MAHEC,KAGF,QAHLC,GAGK,CAHED,KAGF;AAAA,MAFKE,EAEL,QAFLC,MAEK,CAFKD,EAEL;AAAA,MADLE,YACK,QADLA,YACK;;AACL;AADK,wBAEqB7B,KAAK,CAACC,QAAN,CAAesB,YAAf,CAFrB;AAAA;AAAA,MAEEC,KAFF;AAAA,MAESM,QAFT;;AAIL,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;AACvBF,IAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAAST,KAAV,CAAR;AACA,GAFD,CAJK,CAQL;;;AACA,MAAMU,MAAM,GAAG,SAATA,MAAS,GAAM;AACpBL,IAAAA,YAAY,CAACJ,KAAD,EAAQE,EAAR,EAAYH,KAAZ,CAAZ;AACA,GAFD,CATK,CAaL;;;AACAxB,EAAAA,KAAK,CAACmC,SAAN,CAAgB,YAAM;AACrBL,IAAAA,QAAQ,CAACP,YAAD,CAAR;AACA,GAFD,EAEG,CAACA,YAAD,CAFH,EAdK,CAkBL;;AAEA,sBAAO;AAAO,IAAA,KAAK,EAAEC,KAAd;AAAqB,IAAA,QAAQ,EAAEO,QAA/B;AAAyC,IAAA,MAAM,EAAEG,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CA1BD,C,CA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,GAAT,QAA8C;AAAA;;AAAA,MAA/BC,OAA+B,SAA/BA,OAA+B;AAAA,MAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,MAAhBT,YAAgB,SAAhBA,YAAgB;;AAC7C;AACA;AACA;AAH6C,kBAsBzC3B,QAAQ,CACX;AACCmC,IAAAA,OAAO,EAAPA,OADD;AAECC,IAAAA,IAAI,EAAJA,IAFD;AAGCT,IAAAA,YAAY,EAAZA;AAHD,GADW,CAMX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBW,GAtBiC;AAAA,MAK5CU,IAL4C,aAK5CA,IAL4C;AAAA,MAM5CC,aAN4C,aAM5CA,aAN4C;AAAA,MAO5CC,iBAP4C,aAO5CA,iBAP4C;AAAA,MAQ5CC,YAR4C,aAQ5CA,YAR4C;AAAA,MAS5CC,UAT4C,aAS5CA,UAT4C;AAAA,MAU5CC,IAV4C,aAU5CA,IAV4C;AAAA,MAW5CC,eAX4C,aAW5CA,eAX4C;AAAA,MAY5CC,WAZ4C,aAY5CA,WAZ4C;AAAA,MAa5CC,WAb4C,aAa5CA,WAb4C;AAAA,MAc5CC,SAd4C,aAc5CA,SAd4C;AAAA,MAe5CC,QAf4C,aAe5CA,QAf4C;AAAA,MAgB5CC,QAhB4C,aAgB5CA,QAhB4C;AAAA,MAiB5CC,YAjB4C,aAiB5CA,YAjB4C;AAAA,MAkB5CC,WAlB4C,aAkB5CA,WAlB4C;AAAA,MAmB5CC,gBAnB4C,aAmB5CA,gBAnB4C;AAAA,MAoBnCC,cApBmC,aAoB5CC,KApB4C,CAoBnCD,cApBmC;AAAA,kCAqB5CC,KArB4C;AAAA,MAqBnCC,SArBmC,mBAqBnCA,SArBmC;AAAA,MAqBxBC,QArBwB,mBAqBxBA,QArBwB;;AA2C7CC,EAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAZ;AACA,sBACC,uDACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAGC,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,OAArB;AAA6B,IAAA,KAAK,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,CADD,eAKC,oBAAC,KAAD;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,KAAK;AAArB,KAA0BC,aAAa,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEE,YAAY,CAACkB,GAAb,CAAiB,UAACC,WAAD;AAAA,wBACjB,4CAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAEED,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwB,UAAChC,MAAD;AAAA,0BACxB,4CAAQA,MAAM,CAACoC,cAAP,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACEpC,MAAM,CAACqC,MAAP,CAAc,QAAd,CADF,CADwB;AAAA,KAAxB,CAFF,CADiB;AAAA,GAAjB,CADF,CADD,eAaC,+CAAWxB,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACEF,IAAI,CAACqB,GAAL,CAAS,UAAClC,GAAD,EAAMwC,CAAN,EAAY;AACrBvB,IAAAA,UAAU,CAACjB,GAAD,CAAV;AACA,wBACC,4CAAQA,GAAG,CAACyC,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACEzC,GAAG,CAAC0C,KAAJ,CAAUR,GAAV,CAAc,UAACS,IAAD,EAAU;AACxB,0BACC,4CAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACED,IAAI,CAACJ,MAAL,CAAY,MAAZ,CADF,CADD;AAKA,KANA,CADF,CADD;AAWA,GAbA,CADF,CAbD,CALD,CADD,CADD,CAFD,CAHD,CADD;AAkDA;;AAED,SAASM,MAAT,GAAkB;AACjB,MAAMlC,OAAO,GAAGrC,KAAK,CAACwE,OAAN,CACf;AAAA,WAAM,CACL;AACCnD,MAAAA,MAAM,EAAE,MADT;AAECoD,MAAAA,QAAQ,EAAE;AAFX,KADK,EAKL;AACCpD,MAAAA,MAAM,EAAE,UADT;AAECoD,MAAAA,QAAQ,EAAE;AAFX,KALK,EAUL;AACCpD,MAAAA,MAAM,EAAE,OADT;AAECoD,MAAAA,QAAQ,EAAE;AAFX,KAVK,EAcL;AACCpD,MAAAA,MAAM,EAAE,SADT;AAECoD,MAAAA,QAAQ,EAAE;AAFX,KAdK,EAkBL;AACCpD,MAAAA,MAAM,EAAE,kBADT;AAECqD,MAAAA,IAAI,EAAEpD;AAFP,KAlBK,CAAN;AAAA,GADe,EAwBf,EAxBe,CAAhB;;AADiB,yBA4BOtB,KAAK,CAACC,QAAN,CAAe,EAAf,CA5BP;AAAA;AAAA,MA4BVqC,IA5BU;AAAA,MA4BJqC,OA5BI;;AA8BjB,MAAM9C,YAAY,GAAG,SAAfA,YAAe,CAAC+C,QAAD,EAAWC,QAAX,EAAqBrD,KAArB,EAA+B;AACnDmD,IAAAA,OAAO,CAAC,UAACG,GAAD;AAAA,aACPA,GAAG,CAAClB,GAAJ,CAAQ,UAAClC,GAAD,EAAMD,KAAN,EAAgB;AACvB,YAAIA,KAAK,KAAKmD,QAAd,EAAwB;AACvB,mCACIE,GAAG,CAACF,QAAD,CADP,sBAEEC,QAFF,EAEarD,KAFb;AAIA;;AACD,eAAOE,GAAP;AACA,OARD,CADO;AAAA,KAAD,CAAP;AAWAgC,IAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ,EAAsBC,QAAtB,EAAgCrD,KAAhC;AACA,GAbD;;AAeAxB,EAAAA,KAAK,CAACmC,SAAN,CAAgB,YAAM;AACrB4C,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACEC,IADF,CACO,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADP,EAEEF,IAFF,CAEO,UAACC,GAAD;AAAA,aACLN,OAAO,CACNM,GAAG,CAACrB,GAAJ,CAAQ,UAACuB,IAAD,EAAU;AACjB,eAAO;AACNC,UAAAA,IAAI,EAAED,IAAI,CAACC,IADL;AAENC,UAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFT;AAGNC,UAAAA,KAAK,EAAEH,IAAI,CAACG,KAHN;AAINC,UAAAA,OAAO,EAAEJ,IAAI,CAACI;AAJR,SAAP;AAMA,OAPD,CADM,CADF;AAAA,KAFP;AAcA,GAfD,EAeG,EAfH;AAgBA,sBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAElD,OAAd;AAAuB,IAAA,IAAI,EAAEC,IAA7B;AAAmC,IAAA,YAAY,EAAET,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD;AAKA;;AAED,eAAe0C,MAAf","sourcesContent":["/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { useState } from \"react\";\nimport { useTable } from \"react-table\";\n// reactstrap components\nimport {\n\tBadge,\n\tButton,\n\tCard,\n\tCardHeader,\n\tCardFooter,\n\tDropdownMenu,\n\tDropdownItem,\n\tUncontrolledDropdown,\n\tDropdownToggle,\n\tMedia,\n\tPagination,\n\tPaginationItem,\n\tPaginationLink,\n\tProgress,\n\tTable,\n\tContainer,\n\tRow,\n\tUncontrolledTooltip,\n} from \"reactstrap\";\n// core components\nimport Header from \"components/Headers/Header.js\";\n\nconst EditableCell = ({\n\tvalue: initialValue,\n\trow: { index },\n\tcolumn: { id },\n\tupdateMyData, // This is a custom function that we supplied to our table instance\n}) => {\n\t// We need to keep and update the state of the cell normally\n\tconst [value, setValue] = React.useState(initialValue);\n\n\tconst onChange = (e) => {\n\t\tsetValue(e.target.value);\n\t};\n\n\t//   We'll only update the external data when the input is blurred\n\tconst onBlur = () => {\n\t\tupdateMyData(index, id, value);\n\t};\n\n\t// If the initialValue is changed external, sync it up with our state\n\tReact.useEffect(() => {\n\t\tsetValue(initialValue);\n\t}, [initialValue]);\n\n\t//removed onBlur={onBlur}\n\n\treturn <input value={value} onChange={onChange} onBlur={onBlur} />;\n};\n\n// const IndeterminateCheckbox = React.forwardRef(\n// \t({ indeterminate, ...rest }, ref) => {\n// \t\tconsole.log(indeterminate);\n// \t\tconst defaultRef = React.useRef();\n// \t\tconst resolvedRef = ref || defaultRef;\n// \t\tconst [value, setValue] = useState({ ...rest }.checked);\n// \t\tReact.useEffect(() => {\n// \t\t\tresolvedRef.current.indeterminate = indeterminate;\n// \t\t}, [resolvedRef, indeterminate]);\n\n// \t\tconst handleValue = () => {\n// \t\t\tif (value) setValue(false);\n// \t\t\telse setValue(true);\n// \t\t};\n\n// \t\treturn (\n// \t\t\t<>\n// \t\t\t\t<Button\n// \t\t\t\t\ttype=\"checkbox\"\n// \t\t\t\t\tref={resolvedRef}\n// \t\t\t\t\t{...rest}\n// \t\t\t\t\tonClick={handleValue}\n// \t\t\t\t\tvalue={value}\n// \t\t\t\t>\n// \t\t\t\t\t{value ? \"CheckedIn\" : \"Checkout\"}\n// \t\t\t\t</Button>\n// \t\t\t</>\n// \t\t);\n// \t}\n// );\n// Be sure to pass our updateMyData and the skipPageReset option\nfunction App({ columns, data, updateMyData }) {\n\t// For this example, we're using pagination to illustrate how to stop\n\t// the current page from resetting when our data changes\n\t// Otherwise, nothing is different here.\n\tconst {\n\t\trows,\n\t\tgetTableProps,\n\t\tgetTableBodyProps,\n\t\theaderGroups,\n\t\tprepareRow,\n\t\tpage,\n\t\tcanPreviousPage,\n\t\tcanNextPage,\n\t\tpageOptions,\n\t\tpageCount,\n\t\tgotoPage,\n\t\tnextPage,\n\t\tpreviousPage,\n\t\tsetPageSize,\n\t\tselectedFlatRows,\n\t\tstate: { selectedRowIds },\n\t\tstate: { pageIndex, pageSize },\n\t} = useTable(\n\t\t{\n\t\t\tcolumns,\n\t\t\tdata,\n\t\t\tupdateMyData,\n\t\t}\n\t\t// (hooks) => {\n\t\t// \thooks.visibleColumns.push((columns) => [\n\t\t// \t\t{\n\t\t// \t\t\tid: \"selection\",\n\t\t// \t\t\tHeader: () => <div>CheckIn/Checkout</div>,\n\t\t// \t\t\tCell: ({ row }) => (\n\t\t// \t\t\t\t<div>\n\t\t// \t\t\t\t\t<IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n\t\t// \t\t\t\t</div>\n\t\t// \t\t\t),\n\t\t// \t\t},\n\t\t// \t\t...columns,\n\t\t// \t]);\n\t\t// }\n\t);\n\tconsole.log(rows);\n\treturn (\n\t\t<>\n\t\t\t<Header />\n\t\t\t{/* Page content */}\n\t\t\t<Container className=\"mt--7\" fluid>\n\t\t\t\t{/* Table */}\n\t\t\t\t<Row>\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<Card className=\"shadow\">\n\t\t\t\t\t\t\t<CardHeader className=\"border-0\">\n\t\t\t\t\t\t\t\t<h3 className=\"mb-0\">Card tables</h3>\n\t\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t\t{/* <Container fluid> */}\n\t\t\t\t\t\t\t<Table bordered hover {...getTableProps()}>\n\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t{headerGroups.map((headerGroup) => (\n\t\t\t\t\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\n\t\t\t\t\t\t\t\t\t\t\t{/* <th>CheckIn/Out</th> */}\n\t\t\t\t\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<th {...column.getHeaderProps()}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{column.render(\"Header\")}\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t<tbody {...getTableBodyProps()}>\n\t\t\t\t\t\t\t\t\t{rows.map((row, i) => {\n\t\t\t\t\t\t\t\t\t\tprepareRow(row);\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<tr {...row.getRowProps()}>\n\t\t\t\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td {...cell.getCellProps()}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{cell.render(\"Cell\")}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</div>\n\t\t\t\t</Row>\n\t\t\t\t{/* Dark table */}\n\t\t\t</Container>\n\t\t</>\n\t);\n}\n\nfunction Tables() {\n\tconst columns = React.useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tHeader: \"Name\",\n\t\t\t\taccessor: \"name\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: \"UserName\",\n\t\t\t\taccessor: \"username\",\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tHeader: \"Email\",\n\t\t\t\taccessor: \"email\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: \"Website\",\n\t\t\t\taccessor: \"website\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: \"Profile Progress\",\n\t\t\t\tCell: EditableCell,\n\t\t\t},\n\t\t],\n\t\t[]\n\t);\n\n\tconst [data, setData] = React.useState([]);\n\n\tconst updateMyData = (rowIndex, columnId, value) => {\n\t\tsetData((old) =>\n\t\t\told.map((row, index) => {\n\t\t\t\tif (index === rowIndex) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...old[rowIndex],\n\t\t\t\t\t\t[columnId]: value,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn row;\n\t\t\t})\n\t\t);\n\t\tconsole.log(rowIndex, columnId, value);\n\t};\n\n\tReact.useEffect(() => {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) =>\n\t\t\t\tsetData(\n\t\t\t\t\tres.map((item) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: item.name,\n\t\t\t\t\t\t\tusername: item.username,\n\t\t\t\t\t\t\temail: item.email,\n\t\t\t\t\t\t\twebsite: item.website,\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t);\n\t}, []);\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<App columns={columns} data={data} updateMyData={updateMyData} />\n\t\t</React.Fragment>\n\t);\n}\n\nexport default Tables;\n"]},"metadata":{},"sourceType":"module"}